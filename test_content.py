#!/usr/bin/env python3
"""
Skrypt testowy - weryfikuje czy naprawione pobieranie tre≈õci wypowiedzi dzia≈Ça
"""

import logging
import sys
from datetime import datetime, date
from pathlib import Path

# Konfiguracja logowania
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_content_fetching():
    """Test pobierania tre≈õci wypowiedzi"""
    print("üß™ TEST POBIERANIA TRE≈öCI WYPOWIEDZI")
    print("=" * 50)

    try:
        # Import naprawionych komponent√≥w
        from SejmBotScraper.api.sejm_client import SejmAPIClient
        from SejmBotScraper.cache.manager import CacheInterface

        print("‚úì Zaimportowano naprawione komponenty")

        # Inicjalizacja
        print("\n1. Inicjalizacja...")
        cache = CacheInterface()
        api_client = SejmAPIClient(cache)

        # Test po≈ÇƒÖczenia
        print("\n2. Test po≈ÇƒÖczenia z API...")
        connection_test = api_client.test_connection()
        print(f"   Wynik testu: {connection_test['total_score']}/4 test√≥w przesz≈Ço")

        if connection_test['total_score'] < 2:
            print("‚ùå API nie dzia≈Ça poprawnie - przerywam test")
            return False

        # Znajd≈∫ odpowiednie posiedzenie do testowania
        print("\n3. Wyszukiwanie posiedzenia do testowania...")
        proceedings = api_client.get_proceedings(10)

        if not proceedings:
            print("‚ùå Nie mo≈ºna pobraƒá listy posiedze≈Ñ")
            return False

        print(f"   Znaleziono {len(proceedings)} posiedze≈Ñ")

        # Znajd≈∫ posiedzenie z przesz≈Ço≈õci
        test_proceeding = None
        test_date = None
        today = date.today()

        for proc in proceedings:
            if proc.get('dates') and proc.get('number', 0) > 0:
                for proc_date in proc['dates']:
                    try:
                        if datetime.strptime(proc_date, '%Y-%m-%d').date() < today:
                            test_proceeding = proc
                            test_date = proc_date
                            break
                    except:
                        continue
                if test_proceeding:
                    break

        if not test_proceeding:
            print("‚ùå Nie znaleziono odpowiedniego posiedzenia do testowania")
            return False

        proc_id = test_proceeding.get('number')
        print(f"   Wybrano posiedzenie {proc_id}, dzie≈Ñ {test_date}")

        # Test pobierania listy wypowiedzi
        print("\n4. Test pobierania listy wypowiedzi...")
        statements_data = api_client.get_transcripts_list(10, proc_id, test_date)

        if not statements_data or not statements_data.get('statements'):
            print("‚ùå Nie mo≈ºna pobraƒá listy wypowiedzi")
            return False

        statements = statements_data['statements']
        print(f"   Znaleziono {len(statements)} wypowiedzi")

        # Test pobierania tre≈õci wypowiedzi
        print("\n5. Test pobierania tre≈õci wypowiedzi...")
        success_count = 0
        test_count = min(5, len(statements))  # Testuj maksymalnie 5 wypowiedzi

        for i in range(test_count):
            stmt = statements[i]
            stmt_num = stmt.get('num')
            speaker = stmt.get('name', 'Nieznany')

            if not stmt_num:
                print(f"      Wypowied≈∫ {i + 1}: Brak numeru - pomijam")
                continue

            print(f"      Wypowied≈∫ {i + 1}/{test_count}: {speaker} (nr {stmt_num})")

            # Test HTML
            html_content = api_client.get_statement_html(10, proc_id, test_date, stmt_num)

            if html_content and len(html_content.strip()) > 50:
                # Test czyszczenia do tekstu
                clean_text = api_client._clean_html_to_text(html_content)

                if clean_text and len(clean_text.strip()) > 30:
                    success_count += 1
                    preview = clean_text[:100].replace('\n', ' ')
                    print(f"        ‚úì Pobrano tre≈õƒá: {len(clean_text)} znak√≥w")
                    print(f"        Preview: {preview}...")
                else:
                    print(f"        ‚ö† HTML pobrane ({len(html_content)} zn.) ale po czyszczeniu za ma≈Ço tre≈õci")
            else:
                print(f"        ‚ùå Nie pobrano tre≈õci HTML")

            # Test pe≈Çnego tekstu
            full_text = api_client.get_statement_full_text(10, proc_id, test_date, stmt_num)
            if full_text and len(full_text.strip()) > 30:
                print(f"        ‚úì Metoda pe≈Çnego tekstu: {len(full_text)} znak√≥w")

        print(f"\nüìä WYNIKI TEST√ìW:")
        print(f"   Testowane wypowiedzi: {test_count}")
        print(f"   Udane pobierania: {success_count}")
        print(f"   Wska≈∫nik sukcesu: {(success_count / test_count) * 100:.1f}%")

        if success_count > 0:
            print("‚úÖ TEST PRZESZED≈Å - pobieranie tre≈õci dzia≈Ça!")

            # Test integracji z scraperem
            print("\n6. Test integracji z scraperem...")

            try:
                from SejmBotScraper.scraping.implementations.scraper import SejmScraper

                scraper = SejmScraper(api_client=api_client, cache_manager=cache)

                # Test przetwarzania jednego dnia
                print(f"   Testowanie scrapera dla {test_date}...")

                result = scraper.scrape_proceeding_date(10, proc_id, test_date, fetch_full_statements=True)

                if result:
                    stats = scraper.stats
                    print(f"   ‚úì Scraper przetwory≈Ç {stats.get('statements_processed', 0)} wypowiedzi")
                    print(f"   ‚úì Z tre≈õciƒÖ: {stats.get('statements_with_full_content', 0)}")
                    print(f"   ‚úì Pr√≥by pobierania: {stats.get('content_fetch_attempts', 0)}")
                    print(f"   ‚úì Udane pobierania: {stats.get('content_fetch_successes', 0)}")

                    if stats.get('statements_with_full_content', 0) > 0:
                        print("‚úÖ INTEGRACJA Z SCRAPEREM DZIA≈ÅA!")
                    else:
                        print("‚ö† Scraper nie pobra≈Ç tre≈õci wypowiedzi")

                else:
                    print("‚ùå Scraper nie przetworzy≈Ç danych")

            except Exception as e:
                print(f"‚ùå B≈ÇƒÖd testowania scrapera: {e}")

            return True
        else:
            print("‚ùå TEST NIEUDANY - nie uda≈Ço siƒô pobraƒá ≈ºadnej tre≈õci")
            return False

    except ImportError as e:
        print(f"‚ùå B≈ÇƒÖd importu: {e}")
        print("Upewnij siƒô, ≈ºe jeste≈õ w odpowiednim katalogu i masz zainstalowane zale≈ºno≈õci")
        return False
    except Exception as e:
        print(f"‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
        return False


def test_specific_statement():
    """Test konkretnej wypowiedzi dla debugowania"""
    print("\nüîç TEST KONKRETNEJ WYPOWIEDZI")
    print("=" * 50)

    try:
        from SejmBotScraper.api.sejm_client import SejmAPIClient

        # Parametry testowe - mo≈ºna dostosowaƒá
        term = 10
        proceeding = 1  # Pierwsze posiedzenie
        date = "2023-11-14"  # Data z log√≥w
        statement_num = 1  # Pierwsza wypowied≈∫

        print(f"Testowanie wypowiedzi:")
        print(f"  Kadencja: {term}")
        print(f"  Posiedzenie: {proceeding}")
        print(f"  Data: {date}")
        print(f"  Numer wypowiedzi: {statement_num}")

        api_client = SejmAPIClient()

        # Test ka≈ºdej metody osobno
        print(f"\n1. Test get_transcripts_list...")
        statements_data = api_client.get_transcripts_list(term, proceeding, date)

        if statements_data and statements_data.get('statements'):
            statements = statements_data['statements']
            print(f"   ‚úì Pobrano {len(statements)} wypowiedzi")

            # Znajd≈∫ wypowied≈∫ o podanym numerze
            target_statement = None
            for stmt in statements:
                if stmt.get('num') == statement_num:
                    target_statement = stmt
                    break

            if target_statement:
                print(f"   ‚úì Znaleziono wypowied≈∫ {statement_num}")
                print(f"   M√≥wca: {target_statement.get('name', 'Nieznany')}")
                print(f"   Funkcja: {target_statement.get('function', 'Brak')}")
            else:
                print(f"   ‚ùå Nie znaleziono wypowiedzi o numerze {statement_num}")
                if statements:
                    available = [s.get('num') for s in statements[:5]]
                    print(f"   Dostƒôpne numery (pierwsze 5): {available}")
                return False
        else:
            print("   ‚ùå Nie pobrano listy wypowiedzi")
            return False

        print(f"\n2. Test get_statement_html...")
        html_content = api_client.get_statement_html(term, proceeding, date, statement_num)

        if html_content:
            print(f"   ‚úì Pobrano HTML: {len(html_content)} znak√≥w")

            # Poka≈º fragment
            preview = html_content[:300].replace('\n', ' ').replace('\r', ' ')
            print(f"   Fragment HTML: {preview}...")

            # Test czyszczenia
            print(f"\n3. Test czyszczenia HTML...")
            clean_text = api_client._clean_html_to_text(html_content)

            if clean_text:
                print(f"   ‚úì Po oczyszczeniu: {len(clean_text)} znak√≥w")

                clean_preview = clean_text[:200].replace('\n', ' ')
                print(f"   Czysty tekst: {clean_preview}...")

                if len(clean_text.strip()) > 50:
                    print("‚úÖ POBIERANIE TRE≈öCI DZIA≈ÅA POPRAWNIE!")
                    return True
                else:
                    print("‚ö† Tre≈õƒá za kr√≥tka po oczyszczeniu")
            else:
                print("‚ùå Czyszczenie HTML nie powiod≈Ço siƒô")
        else:
            print("‚ùå Nie pobrano HTML")

        print(f"\n4. Test get_statement_full_text...")
        full_text = api_client.get_statement_full_text(term, proceeding, date, statement_num)

        if full_text:
            print(f"   ‚úì Metoda pe≈Çnego tekstu: {len(full_text)} znak√≥w")
            text_preview = full_text[:200].replace('\n', ' ')
            print(f"   Tekst: {text_preview}...")
            return True
        else:
            print("‚ùå Metoda pe≈Çnego tekstu nieudana")

        return False

    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd testu: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """G≈Ç√≥wna funkcja testowa"""
    print("üöÄ TESTY NAPRAWIONEGO POBIERANIA TRE≈öCI WYPOWIEDZI")
    print("=" * 60)

    # Sprawd≈∫ czy jeste≈õmy w odpowiednim katalogu
    if not Path("SejmBotScraper").exists():
        print("‚ùå Nie znaleziono katalogu SejmBotScraper")
        print("Upewnij siƒô, ≈ºe uruchamiasz skrypt z g≈Ç√≥wnego katalogu projektu")
        return 1

    # Test og√≥lny
    print("\n" + "=" * 60)
    general_success = test_content_fetching()

    # Test konkretnej wypowiedzi
    print("\n" + "=" * 60)
    specific_success = test_specific_statement()

    # Podsumowanie
    print("\n" + "=" * 60)
    print("üìã PODSUMOWANIE TEST√ìW:")
    print(f"   Test og√≥lny: {'‚úÖ PRZESZED≈Å' if general_success else '‚ùå NIEUDANY'}")
    print(f"   Test konkretny: {'‚úÖ PRZESZED≈Å' if specific_success else '‚ùå NIEUDANY'}")

    if general_success or specific_success:
        print("\nüéâ NAPRAWKI DZIA≈ÅAJƒÑ! Pobieranie tre≈õci wypowiedzi zosta≈Ço naprawione.")
        print("\nMo≈ºesz teraz uruchomiƒá g≈Ç√≥wny scraper:")
        print("  python SejmBotScraper/main.py")
        return 0
    else:
        print("\n‚ùå TESTY NIEUDANE. Sprawd≈∫:")
        print("  1. Po≈ÇƒÖczenie internetowe")
        print("  2. Dostƒôpno≈õƒá API Sejmu")
        print("  3. Poprawno≈õƒá implementacji")
        return 1


if __name__ == "__main__":
    sys.exit(main())
