# !/usr/bin/env python3
# main.py
"""
SejmBotScraper - Narzƒôdzie do pobierania stenogram√≥w z Sejmu RP

G≈Ç√≥wny plik uruchamiajƒÖcy program do pobierania stenogram√≥w
z API Sejmu Rzeczypospolitej Polskiej.
"""

import argparse
import logging
import sys
from pathlib import Path

from config import LOG_LEVEL, LOG_FORMAT, LOGS_DIR, DEFAULT_TERM
from scraper import SejmScraper


def setup_logging(verbose: bool = False, log_file: str = None):
    """
    Konfiguruje system logowania

    Args:
        verbose: czy wy≈õwietlaƒá szczeg√≥≈Çowe logi
        log_file: ≈õcie≈ºka do pliku z logami (opcjonalne)
    """
    level = logging.DEBUG if verbose else getattr(logging, LOG_LEVEL.upper())

    # Usu≈Ñ istniejƒÖce handlery ≈ºeby uniknƒÖƒá duplikat√≥w
    root_logger = logging.getLogger()
    root_logger.handlers.clear()

    # Konfiguracja podstawowa - handler konsoli
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(level)
    console_formatter = logging.Formatter(LOG_FORMAT)
    console_handler.setFormatter(console_formatter)

    # Lista handler√≥w
    handlers = [console_handler]

    # Dodaj handler pliku je≈õli podano
    if log_file:
        # Upewnij siƒô, ≈ºe katalog logs istnieje
        logs_path = Path(LOGS_DIR)
        logs_path.mkdir(exist_ok=True)

        log_file_path = logs_path / log_file

        try:
            file_handler = logging.FileHandler(log_file_path, encoding='utf-8')
            file_handler.setLevel(level)
            file_formatter = logging.Formatter(LOG_FORMAT)
            file_handler.setFormatter(file_formatter)
            handlers.append(file_handler)

            # Informuj u≈ºytkownika o lokalizacji pliku
            print(f"Logi bƒôdƒÖ zapisywane do: {log_file_path.absolute()}")

        except Exception as e:
            print(f"Ostrze≈ºenie: Nie mo≈ºna utworzyƒá pliku log√≥w {log_file_path}: {e}")
            print("Kontynuujƒô tylko z logowaniem do konsoli.")

    # Konfiguruj logger podstawowy z handlerami
    root_logger.setLevel(level)
    for handler in handlers:
        root_logger.addHandler(handler)


def print_banner():
    """Wy≈õwietla banner aplikacji"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        SejmBotScraper                        ‚ïë
‚ïë                                                              ‚ïë
‚ïë          Narzƒôdzie do pobierania stenogram√≥w Sejmu RP        ‚ïë
‚ïë                         Wersja 1.0.1                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


def main():
    """G≈Ç√≥wna funkcja programu"""
    parser = argparse.ArgumentParser(
        description="SejmBotScraper - pobiera stenogramy z API Sejmu RP",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Przyk≈Çady u≈ºycia:
  %(prog)s                              # pobierz ca≈ÇƒÖ 10. kadencjƒô (tylko PDF)
  %(prog)s -t 9                         # pobierz 9. kadencjƒô
  %(prog)s -t 10 -p 15                  # pobierz posiedzenie 15 z 10. kadencji
  %(prog)s -t 10 --statements           # pobierz tak≈ºe wypowiedzi HTML
  %(prog)s --list-terms                 # wy≈õwietl dostƒôpne kadencje
  %(prog)s -t 10 --summary              # wy≈õwietl podsumowanie posiedze≈Ñ
  %(prog)s -v --log-file scraper.log    # verbose z zapisem do pliku
        """
    )

    # G≈Ç√≥wne opcje
    parser.add_argument(
        '-t', '--term',
        type=int,
        default=DEFAULT_TERM,
        help=f'Numer kadencji do pobrania (domy≈õlnie: {DEFAULT_TERM})'
    )

    parser.add_argument(
        '-p', '--proceeding',
        type=int,
        help='Numer konkretnego posiedzenia do pobrania (opcjonalne)'
    )

    # Opcje pobierania
    parser.add_argument(
        '--no-pdfs',
        action='store_true',
        help='Nie pobieraj plik√≥w PDF (domy≈õlnie pobierane)'
    )

    parser.add_argument(
        '--statements',
        action='store_true',
        help='Pobierz tak≈ºe poszczeg√≥lne wypowiedzi w HTML (domy≈õlnie nie)'
    )

    # Opcje informacyjne
    parser.add_argument(
        '--list-terms',
        action='store_true',
        help='Wy≈õwietl listƒô dostƒôpnych kadencji i zako≈Ñcz'
    )

    parser.add_argument(
        '--summary',
        action='store_true',
        help='Wy≈õwietl podsumowanie posiedze≈Ñ dla danej kadencji'
    )

    # Opcje logowania
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Szczeg√≥≈Çowe logi (DEBUG level)'
    )

    parser.add_argument(
        '--log-file',
        type=str,
        help='Zapisuj logi do pliku (w katalogu logs/)'
    )

    args = parser.parse_args()

    # Konfiguruj logowanie przed jakƒÖkolwiek operacjƒÖ
    setup_logging(args.verbose, args.log_file)

    # Wy≈õwietl banner
    if not args.list_terms and not args.summary:
        print_banner()

    # Utw√≥rz scraper
    scraper = SejmScraper()

    try:
        # Lista kadencji
        if args.list_terms:
            terms = scraper.get_available_terms()
            if terms:
                print("Dostƒôpne kadencje Sejmu RP:")
                print("-" * 50)
                for term in terms:
                    current = " (OBECNA)" if term.get('current') else ""
                    print(f"Kadencja {term['num']:2d}: {term.get('from', '?')} - {term.get('to', 'trwa')}{current}")
            else:
                print("Nie mo≈ºna pobraƒá listy kadencji.")
            return

        # Podsumowanie posiedze≈Ñ
        if args.summary:
            summary = scraper.get_term_proceedings_summary(args.term)
            if summary:
                print(f"Posiedzenia kadencji {args.term}:")
                print("-" * 60)
                for proc in summary:
                    current = " [TRWA]" if proc.get('current') else ""
                    future = " [PRZYSZ≈ÅE]" if proc.get('is_future') else ""
                    dates_str = ", ".join(proc['dates']) if proc['dates'] else "brak dat"
                    print(f"Posiedzenie {proc['number']:3d}: {dates_str}{current}{future}")
                    if proc.get('title'):
                        print(f"    Tytu≈Ç: {proc['title'][:80]}{'...' if len(proc['title']) > 80 else ''}")
                    print()
            else:
                print(f"Nie mo≈ºna pobraƒá informacji o posiedzeniach kadencji {args.term}.")
            return

        # Walidacja parametr√≥w przed g≈Ç√≥wnym procesem
        if args.proceeding is not None and args.proceeding <= 0:
            print(f"B≈ÇƒÖd: Numer posiedzenia musi byƒá wiƒôkszy ni≈º 0 (podano: {args.proceeding})")
            sys.exit(1)

        # G≈Ç√≥wny proces scrapowania
        logging.info("Rozpoczynanie procesu pobierania stenogram√≥w...")

        download_pdfs = not args.no_pdfs
        download_statements = args.statements

        if args.proceeding:
            # Pobierz konkretne posiedzenie
            success = scraper.scrape_specific_proceeding(
                args.term,
                args.proceeding,
                download_pdfs,
                download_statements
            )

            if success:
                print(f"\n‚úÖ Pomy≈õlnie pobrano posiedzenie {args.proceeding} z kadencji {args.term}")
            else:
                print(f"\n‚ùå B≈ÇƒÖd podczas pobierania posiedzenia {args.proceeding}")
                sys.exit(1)
        else:
            # Pobierz ca≈ÇƒÖ kadencjƒô
            stats = scraper.scrape_term(args.term, download_pdfs, download_statements)

            print(f"\nüìä PODSUMOWANIE POBIERANIA KADENCJI {args.term}")
            print("=" * 50)
            print(f"Przetworzone posiedzenia: {stats['proceedings_processed']}")
            print(f"Pominiƒôte przysz≈Çe posiedzenia: {stats.get('future_proceedings_skipped', 0)}")
            print(f"Pobrane PDF-y:           {stats['pdfs_downloaded']}")
            print(f"Zapisane wypowiedzi:     {stats['statements_saved']}")
            print(f"B≈Çƒôdy:                   {stats['errors']}")
            print("=" * 50)

            if stats['errors'] > 0:
                print(f"‚ö†Ô∏è  Proces zako≈Ñczony z {stats['errors']} b≈Çƒôdami. Sprawd≈∫ logi.")
                sys.exit(1)
            else:
                print("‚úÖ Proces zako≈Ñczony pomy≈õlnie!")

    except KeyboardInterrupt:
        logging.info("Proces przerwany przez u≈ºytkownika (Ctrl+C)")
        print("\n\n‚èπÔ∏è  Proces przerwany przez u≈ºytkownika.")
        sys.exit(1)

    except Exception as e:
        logging.exception("Nieoczekiwany b≈ÇƒÖd programu")
        print(f"\n‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
        print("Sprawd≈∫ logi dla szczeg√≥≈Ç√≥w.")
        sys.exit(1)


if __name__ == "__main__":
    main()
