#!/usr/bin/env python3
"""
WERSJA DEBUG - main.py z dodatkowymi logami i timeoutem
Znajdzie miejsce, w kt√≥rym program mo≈ºe siƒô zawiesiƒá
"""

import argparse
import logging
import sys
import concurrent.futures
import functools
from pathlib import Path

# Dodaj katalog g≈Ç√≥wny do PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

logger = logging.getLogger(__name__)


"""Obs≈Çuga limitu czasu (cross-platform).

Zamiast u≈ºywaƒá mechanizmu sygna≈Ç√≥w (SIGALRM), kt√≥ry nie jest dostƒôpny na
Windows, korzystamy z ThreadPoolExecutor i metody future.result(timeout=...).
Je≈õli wywo≈Çanie funkcji przekroczy limit czasu, wypisujemy komunikat i
zwracamy None.
"""


def with_timeout(seconds):
    """Dekorator ustawiajƒÖcy limit czasu dla wywo≈Ça≈Ñ funkcji (cross-platform).

    Parametry:
      seconds (int): limit czasu w sekundach

    Zwraca None i wypisuje komunikat w przypadku przekroczenia limitu.
    """

    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
                future = executor.submit(func, *args, **kwargs)
                try:
                    return future.result(timeout=seconds)
                except concurrent.futures.TimeoutError:
                    print(
                        f"\n‚è∞ TIMEOUT - operacja '{func.__name__}' przekroczy≈Ça {seconds} sekund"
                    )
                    return None

        return wrapper

    return decorator


def print_banner():
    """Wy≈õwietla banner aplikacji"""
    banner = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    SejmBot Scraper v3.1 DEBUG                   ‚ïë
‚ïë                                                                  ‚ïë
‚ïë           POBIERANIE TRE≈öCI WYPOWIEDZI Z SEJMU RP                ‚ïë
‚ïë                                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


def create_cli_parser():
    """Tworzy parser argument√≥w CLI"""
    parser = argparse.ArgumentParser(
        description="SejmBot Scraper v3.1 DEBUG - znajd≈∫ gdzie siƒô zawiesza",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "-t", "--term", type=int, default=10, help="Numer kadencji (domy≈õlnie 10)"
    )
    parser.add_argument(
        "-p", "--proceeding", type=int, help="Numer konkretnego posiedzenia"
    )
    parser.add_argument(
        "--max-proceedings",
        type=int,
        default=1,
        help="Maksymalna liczba posiedze≈Ñ (domy≈õlnie 1)",
    )
    parser.add_argument(
        "--test-content", action="store_true", help="Test pobierania tre≈õci"
    )
    parser.add_argument("--health", action="store_true", help="Sprawd≈∫ stan systemu")
    parser.add_argument("--debug", action="store_true", help="Debug mode")
    parser.add_argument(
        "--timeout", type=int, default=60, help="Timeout w sekundach (domy≈õlnie 60)"
    )

    return parser


def setup_logging_debug():
    """Konfiguruje szczeg√≥≈Çowe logowanie"""
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler(sys.stdout)],
    )
    print("üîç W≈ÇƒÖczono szczeg√≥≈Çowe debugowanie")


@with_timeout(30)  # 30 sekund na import
def debug_imports():
    """Testuje importy z timeoutem"""
    print("üîß KROK 1: Testowanie import√≥w...")

    try:
        print("  - Importowanie core...")
        from SejmBotScraper.core import create_scraper, get_version_info

        print("  ‚úÖ Core zaimportowany")

        return create_scraper, get_version_info
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd importu: {e}")
        return None, None


@with_timeout(30)  # 30 sekund na utworzenie scrapera
def debug_scraper_creation():
    """Testuje utworzenie scrapera z timeoutem"""
    print("üîß KROK 2: Tworzenie scrapera...")

    create_scraper, get_version_info = debug_imports()
    if not create_scraper:
        return None

    try:
        config = {"max_proceedings": 1}
        print("  - Wywo≈Çujƒô create_scraper...")
        scraper = create_scraper(config)
        print("  ‚úÖ Scraper utworzony")
        return scraper
    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd utworzenia scrapera: {e}")
        return None


@with_timeout(60)  # 60 sekund na API test
def debug_api_connection(scraper):
    """Testuje po≈ÇƒÖczenie API z timeoutem"""
    print("üîß KROK 3: Test po≈ÇƒÖczenia API...")

    try:
        print("  - Sprawdzanie czy API client istnieje...")
        if not hasattr(scraper, "api_client") or not scraper.api_client:
            print("  ‚ùå Brak API client")
            return False

        print("  ‚úÖ API client istnieje")

        print("  - Test pobierania kadencji...")
        terms = scraper.get_available_terms()
        if terms:
            print(f"  ‚úÖ Pobrano {len(terms)} kadencji")
        else:
            print("  ‚ö†Ô∏è Brak kadencji")

        return True

    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd API: {e}")
        return False


@with_timeout(120)  # 2 minuty na pobieranie posiedze≈Ñ
def debug_proceedings_fetch(scraper, term):
    """Testuje pobieranie posiedze≈Ñ z timeoutem"""
    print(f"üîß KROK 4: Pobieranie posiedze≈Ñ kadencji {term}...")

    try:
        print("  - Wywo≈Çujƒô get_term_proceedings...")
        proceedings = scraper.get_term_proceedings(term)

        if not proceedings:
            print("  ‚ùå Nie mo≈ºna pobraƒá posiedze≈Ñ")
            return None

        print(f"  ‚úÖ Pobrano {len(proceedings)} posiedze≈Ñ")
        print(f"  üìã Pierwsze 3 posiedzenia:")

        for i, proc in enumerate(proceedings[:3], 1):
            proc_id = proc.get("number", "?")
            dates = proc.get("dates", [])
            print(f"    {i}. Posiedzenie {proc_id} - {len(dates)} dni")

        return proceedings

    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd pobierania posiedze≈Ñ: {e}")
        return None


@with_timeout(180)  # 3 minuty na scrapowanie
def debug_scraping(scraper, term, max_proceedings):
    """Testuje scrapowanie z timeoutem"""
    print(f"üîß KROK 5: Test scrapowania (limit: {max_proceedings} posiedze≈Ñ)...")

    try:
        print("  - Wywo≈Çujƒô scrape_term_statements...")
        print("  ‚è≥ To mo≈ºe potrwaƒá do 3 minut...")

        stats = scraper.scrape_term_statements(
            term=term, max_proceedings=max_proceedings, fetch_full_statements=True
        )

        print(f"  ‚úÖ Scrapowanie zako≈Ñczone!")
        print(f"  üìä Wyniki:")
        print(f"    - Posiedzenia: {stats.get('proceedings_processed', 0)}")
        print(f"    - Wypowiedzi: {stats.get('statements_processed', 0)}")
        print(f"    - Z tre≈õciƒÖ: {stats.get('statements_with_full_content', 0)}")
        print(f"    - B≈Çƒôdy: {stats.get('errors', 0)}")

        return stats

    except Exception as e:
        print(f"  ‚ùå B≈ÇƒÖd scrapowania: {e}")
        import traceback

        traceback.print_exc()
        return None


def debug_workflow(term, max_proceedings):
    """G≈Ç√≥wny workflow debug z krokami"""
    print("=" * 60)
    print("üêõ DEBUG WORKFLOW - znajd≈∫my gdzie siƒô zawiesza")
    print("=" * 60)

    # KROK 1: Importy
    scraper = debug_scraper_creation()
    if not scraper:
        print("‚ùå KONIEC - nie mo≈ºna utworzyƒá scrapera")
        return False

    # KROK 2: API connection
    api_ok = debug_api_connection(scraper)
    if not api_ok:
        print("‚ùå KONIEC - problemy z API")
        return False

    # KROK 3: Pobieranie posiedze≈Ñ (tu mo≈ºe byƒá problem)
    proceedings = debug_proceedings_fetch(scraper, term)
    if not proceedings:
        print("‚ùå KONIEC - nie mo≈ºna pobraƒá posiedze≈Ñ")
        return False

    # KROK 4: Scrapowanie (tu te≈º mo≈ºe byƒá problem)
    stats = debug_scraping(scraper, term, max_proceedings)
    if not stats:
        print("‚ùå KONIEC - b≈ÇƒÖd scrapowania")
        return False

    print("‚úÖ DEBUG ZAKO≈ÉCZONY - wszystko dzia≈Ça!")
    return True


def main():
    """G≈Ç√≥wna funkcja DEBUG"""
    parser = create_cli_parser()
    args = vars(parser.parse_args())

    try:
        setup_logging_debug()
        print_banner()

        # Test tre≈õci - szybki
        if args.get("test_content"):
            print("üß™ SZYBKI TEST TRE≈öCI")
            scraper = debug_scraper_creation()
            if scraper:
                results = scraper.test_content_fetching(
                    args.get("term", 10), max_tests=3
                )
                success_rate = results.get("success_rate", 0)
                print(f"Wynik testu: {success_rate:.1f}% sukcesu")
                return 0 if success_rate > 50 else 1
            return 1

        # Health check
        if args.get("health"):
            print("üè• HEALTH CHECK")
            scraper = debug_scraper_creation()
            if scraper:
                health = scraper.health_check()
                print(f"Status: {'ZDROWY' if health.get('healthy') else 'PROBLEMY'}")
                return 0 if health.get("healthy") else 1
            return 1

        # G≈Ç√≥wny debug workflow
        term = args.get("term", 10)
        max_proceedings = args.get("max_proceedings", 1)
        timeout_seconds = args.get("timeout", 60)

        print(f"üêõ DEBUG SCRAPOWANIA")
        print(f"   Kadencja: {term}")
        print(f"   Max posiedze≈Ñ: {max_proceedings}")
        print(f"   Timeout: {timeout_seconds}s")

        success = debug_workflow(term, max_proceedings)
        return 0 if success else 1

    except KeyboardInterrupt:
        print("\n\n‚õî Proces przerwany przez u≈ºytkownika.")
        return 1
    except Exception as e:
        print(f"\n‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
        import traceback

        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
